import os

import numpy as np
import pytest

from duly import DensityEstimation


def test_density_estimation_basics():
    """Test the density estimation operations work correctly"""
    filename = os.path.join(os.path.split(__file__)[0], "2gaussians_in_2d.npy")

    X = np.load(filename)

    de = DensityEstimation(coordinates=X)

    de.compute_distances(maxk=25)

    de.compute_id_2NN()
    assert pytest.approx(1.85, de.id_selected)

    de.compute_density_kNN(10)

    expected_den = np.array(
        [
            -2.8220008108147416,
            -2.947931245648559,
            -3.1702698947335453,
            -4.253117565894661,
            -3.0677717379081395,
            -3.6883675339093935,
            -4.423842698358014,
            -2.8907446447979344,
            -2.8227340938241356,
            -4.467319612669922,
            -2.697210191664055,
            -3.4941622019586642,
            -4.2276852132665885,
            -4.59059038648674,
            -2.636733327667497,
            -3.031771622140173,
            -2.4483401970668477,
            -3.7027127478228508,
            -2.999010021141978,
            -3.4329410805162066,
            -4.145968519008704,
            -3.62527153983834,
            -3.255889259737544,
            -3.284734003582324,
            -3.261966413968027,
            -3.251779775673141,
            -3.133707871386706,
            -3.2803324856638207,
            -4.040949416061883,
            -3.261966413968027,
            -2.6536144504591292,
            -2.8016645629012213,
            -3.4234514632531425,
            -4.598374051349623,
            -3.7713048768411843,
            -3.9959851159239514,
            -2.7393818286114575,
            -3.110054620736409,
            -3.1817385888525074,
            -3.9637725812131337,
            -4.724965566961144,
            -4.660415574273792,
            -2.8227340938241356,
            -3.762472029563731,
            -3.4941622019586642,
            -2.6054213821326333,
            -3.4965724049906877,
            -2.8786674397606404,
            -3.6328447184714,
            -2.7812088785474893,
            -4.188640101462744,
            -2.9227834681042246,
            -4.3449388176531265,
            -3.0508138130849978,
            -3.254038677243914,
            -3.8740134650638374,
            -2.7907017197150132,
            -2.753661617486966,
            -4.459460971162333,
            -2.2365427310454855,
            -4.310262341746594,
            -3.4436291078255916,
            -3.9353295267789594,
            -3.6125811814230424,
            -2.834328012395537,
            -2.6273978253984565,
            -2.125683306870561,
            -3.2661047376419305,
            -4.055469481879828,
            -3.82144710709757,
            -3.8025456896058696,
            -2.304827037139642,
            -3.6878528983142504,
            -3.412757149678657,
            -2.7930022403289407,
            -5.037220292302598,
            -3.4631473179020045,
            -2.9602850765258335,
            -3.152706965957921,
            -2.6244950451306455,
            -3.50830926408333,
            -4.027317042031187,
            -2.6240596332960644,
            -3.0889567071980997,
            -2.3519028348733935,
            -3.0889567071980997,
            -2.2568873106131373,
            -4.119418721162674,
            -2.888814698731484,
            -3.7350111903932715,
            -2.262087187290615,
            -3.46726921377058,
            -4.222604050184877,
            -3.0186718181185372,
            -2.6618961711403224,
            -4.015545260097705,
            -2.615525665365989,
            -2.2568873106131373,
            -2.568716055944243,
            -3.3324362532864193,
        ]
    )

    # Check we get the expected answer
    assert np.array_equal(de.Rho, expected_den)
